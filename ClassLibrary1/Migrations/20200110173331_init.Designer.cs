// <auto-generated />
using System;
using BotZeitNot.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BotZeitNot.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200110173331_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BotZeitNot.DAL.Domain.Entity.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Rating")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("TitleEu")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TitleRu")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("BotZeitNot.DAL.Domain.Entity.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("BotZeitNot.DAL.Domain.Entity.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Link")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NameEu")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NameRu")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SeasonsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("BotZeitNot.DAL.Domain.Entity.SeriesUser", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SeriesId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SeriesUsers");
                });

            modelBuilder.Entity("BotZeitNot.DAL.Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TelegramId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BotZeitNot.DAL.Domain.Entity.Episode", b =>
                {
                    b.HasOne("BotZeitNot.DAL.Domain.Entity.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BotZeitNot.DAL.Domain.Entity.Season", b =>
                {
                    b.HasOne("BotZeitNot.DAL.Domain.Entity.Series", "Series")
                        .WithMany("Seasons")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BotZeitNot.DAL.Domain.Entity.SeriesUser", b =>
                {
                    b.HasOne("BotZeitNot.DAL.Domain.Entity.Series", "Series")
                        .WithMany("SeriesUser")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BotZeitNot.DAL.Domain.Entity.User", "User")
                        .WithMany("SeriesUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
